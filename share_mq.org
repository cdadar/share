# Appear in cover-slide:
#+TITLE: 消息中间件 -- mq
#+SUBTITLE: 消息中间件
#+DATE: 2018/08/30（四）
#+AUTHOR: chens

# org config
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 25.2 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: zh
#+SELECT_TAGS: export

# Appear under each slide:
#+FAVICON: images/org-icon.png
#+ICON: images/emacs-icon.png
#+HASHTAG: 消息中间件

# Google Analytics
#+ANALYTICS: UA-42122243-1

# Highlight code blocks with Prettify.js
#+USE_PRETTIFY: true

# Display math formula with MathJax.js
# MathJax is a little fat (~5 MB), set it `false` if no need to shrink the
# size of slide file
#+USE_MATHJAX: true

# Build list animation
#+USE_BUILDS: true


* 什么是消息中间件 

消息中间件是指利用高效可靠的消息传递机制进行平台无关的数据交流，并
基于数据通信来进行 =分布式系统= 的集成。通过提供消息传递和消息排队模型，它
可以在分布式环境下扩展进程间的通信。 　　


消息中间件可以即支持同步方式，又支持异步方式。异步中间件比同步中间件具
有更强的容错性，在系统故障时可以保证消息的正常传输。异步中间件技术又
分为两类： =广播方式= 和 =发布/订阅方式= 。由于发布/订阅方式可以指定哪种类
型的用户可以接受哪种类型的消息，更加有针对性，事实上已成为异步中间件的
非正式标准。

* 消息中间件能做什么

场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种1.串行
的方式；2.并行方式。

（1）串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短
信。以上三个任务全部完成后，返回给客户端。

#+BEGIN_CENTER
#+ATTR_HTML: :width 300px :height 150px
file:images/820332-20160124211106000-2080222350.png
#+END_CENTER

（2）并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注
册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可
以提高处理的时间。

#+BEGIN_CENTER
#+ATTR_HTML: :width 300px :height 150px
file:images/820332-20160124211115703-218873208.png
#+END_CENTER


* 消息中间件能做什么

任何中间件必然都是要去解决特定领域的某个问题，消息中间件解决的就是分布
式系统之间消息传递的问题。消息传递是分布式系统必然要面对的一个问题。

假设一个电商交易的场景，用户下单之后调用库存系统减库存，然后需要调用物
流系统进行发货，如果交易、库存、物流是属于一个系统的，那么就是接口调用。
但是随着系统的发展，各个模块越来越庞大、业务逻辑越来越复杂，必然是要做
服务化和业务拆分的。这个时候就需要考虑这些系统之间如何交互，第一反应就
是RPC（Remote Procedure Call）。系统继续发展，可能一笔交易后续需要调用
几十个接口来执行业务，比如还有风控系统、短信服务等等。这个时候就需要消
息中间件登场来解决问题了。

RPC和消息中间件的场景的差异很大程度上在于就是“依赖”和“量”。比如短信通
知服务并不是事交易环节必须的，并不影响下单流程，不是强依赖，所以交易系
统不应该依赖短信服务。比如一些数据分析程序可能需要在拿到一天的总销售量，
这个就只需要销售中心提供接口在需要时调用即可。

消息中间件出现以后对于交易场景可能是调用库存中心等强依赖系统执行业务，
之后发布一条消息（这条消息存储于消息中间件中）。像是短信通知服务、数据
统计服务等等都是依赖于消息中间件去消费这条消息来完成自己的业务逻辑。

从以上的场景可以看出消息中间件其实就是对系统进行了解耦，同时带来了异步
化等好处。

简单概括一下消息中间件的应用场景大致如下：

- 业务解耦：交易系统不需要知道短信通知服务的存在，只需要发布消息
- 削峰填谷：比如上游系统的吞吐能力高于下游系统，在流量洪峰时可能会冲垮
  下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢
  消费消息解决流量洪峰的问题
- 事件驱动：系统与系统之间可以通过消息传递的形式驱动业务，以流式的模型
  处理

* 消息中间件能做什么

引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：

#+BEGIN_CENTER
#+ATTR_HTML: :width 300px :height 150px
file:images/820332-20160124211131625-1083908699.png
#+END_CENTER


* 消息中间件原理 

面向消息的中间件（MOM），提供了以松散耦合的灵活方式集成应用程序的一种
机制。它们提供了基于存储和转发的应用程序之间的异步数据发送，即应用程序
彼此不直接通信，而是与作为中介的MOM通信。MOM提供了有保证的消息发送（至
少是在尽可能地做 到这一点），应用程序开发人员无需了解远程过程调用（PRC）
和网络/通信协议的细节。

* 消息中间件的组成
- Broker
消息服务器，作为server提供消息核心服务

- Producer
消息生产者，业务的发起方，负责生产消息传输给broker，

- Consumer
消息消费者，业务的处理方，负责从broker获取消息并进行业务逻辑处理

- Topic
主题，发布订阅模式下的消息统一汇集地，不同生产者向topic发送消息，由MQ
服务器分发到不同的订阅者，实现消息的广播

- Queue
队列，PTP模式下，特定生产者向特定queue发送消息，消费者订阅特定的queue
完成指定消息的接收

- Message
消息体，根据不同通信协议定义的固定格式进行编码的数据包，来封装业务数据，
实现消息的传输

* 消息中间件模式分类
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
#+ATTR_HTML: :class build

** 点对点

#+BEGIN_CENTER
#+ATTR_HTML: :width 600px :height 300px
[[file:images/20180417-1.png]]
#+END_CENTER

说明： 

消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并
且消费消息。

消息被消费以后，queue中不再存储，所以消息消费者不可能消费到已经被消费
的消息。 Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者
可以消费。

** 发布/订阅

#+BEGIN_CENTER
#+ATTR_HTML: :width 600px :height 300px
file:images/20180417-2.png
#+END_CENTER

说明： 

消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消
费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。

queue实现了负载均衡，将producer生产的消息发送到消息队列中，由多个消费
者消费。但一个消息只能被一个消费者接受，当没有消费者可用时，这个消息会
被保存直到有一个可用的消费者。  topic实现了发布和订阅，当你发布一个消
息，所有订阅这个topic的服务都能得到这个消息，所以从1到N个订阅者都能得
到一个消息的拷贝。

* 现在主流的消息中间件

- ActiveMQ [[http://activemq.apache.org/]]

ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一
个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经
是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。

- kafka [[https://kafka.apache.org/]]

Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache定级项目。
Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目
的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重
复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。


- RabbitMQ [[https://www.rabbitmq.com/]]

RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。
AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、
安全。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高
的场景，对性能和吞吐量的要求还在其次。

- RocketMQ [[https://rocketmq.apache.org/]]

RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、
适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka
的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应
用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。

* 参考链接

- [[https://www.cnblogs.com/itfly8/p/5155983.html][大型网站架构系列：分布式消息队列（一）]]
- [[https://blog.csdn.net/leexide/article/details/80035462][消息中间件详解]]
- [[http://jm.taobao.org/2016/04/01/kafka-vs-rabbitmq-vs-rocketmq-message-send-performance/][Kafka、RabbitMQ、RocketMQ消息中间件的对比 —— 消息发送性能]]
- [[https://www.cnblogs.com/hzmark/p/mq.html][什么是分布式消息中间件？]]
- [[https://blog.csdn.net/shb_derek1/article/details/78625883][消息中间件的理解和学习]]

* Thank You ˊ・ω・ˋ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

